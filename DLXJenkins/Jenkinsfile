def editMode = "EditMode"
def playMode = "PlayMode"
def pass = "Pass"
def fail = "Fail"
def generalUtil
def unityUtil

pipeline {
    agent any

    tools {
        dotnetsdk 'dotnet-8'
    }

    parameters {
        string(name: 'PR_BRANCH', defaultValue: '', description: '')
        string(name: 'PR_DESTINATION_BRANCH', defaultValue: '', description: '')
        string(name: 'PR_REPO_HTML', defaultValue: '', description: '')
        string(name: 'PR_REPO_NAME', defaultValue: '', description: '')
        string(name: 'PR_COMMIT', defaultValue: '', description: '')
        string(name: 'PR_PROJECT', defaultValue: '', description: '')
        string(name: 'PR_STATE', defaultValue: '', description: '')
        string(name: 'TEST_RUN', defaultValue: '', description: 'This is a test run trigger. Fill in the parameter form with \'Y\' to run the pipeline without commit changes.')
    }

    triggers {
        GenericTrigger(
            genericVariables: [
                [key: 'PR_BRANCH', value: '$.pullrequest.source.branch.name'],
                [key: 'PR_DESTINATION_BRANCH', value: '$.pullrequest.destination.branch.name'],
                [key: 'PR_REPO_HTML', value: '$.repository.links.self.href'],
                [key: 'PR_REPO_NAME', value: '$.repository.name'],
                [key: 'PR_COMMIT', value: '$.pullrequest.source.commit.hash'],
                [key: 'PR_PROJECT', value: '$.repository.full_name'],
                [key: 'PR_STATE', value: '$.pullrequest.state']
            ],

            tokenCredentialId: 'trigger-token',
            regexpFilterText: '$PR_STATE',
            regexpFilterExpression: 'OPEN'
        )
    }

    environment {
        CI_PIPELINE = "true"
        PROJECT_DIR = "${WORKSPACE}/Unity_Project" 
        REPORT_DIR = "${WORKSPACE}/PRJob/${PR_BRANCH}"
        JOB_REPO = "${PR_REPO_HTML}"
        BITBUCKET_ACCESS_TOKEN = credentials('bitbucket-access-token')
        JENKINS_API_KEY = credentials('jenkins-api-key')
        REPO_SSH = "git@bitbucket.org:${PR_PROJECT}.git"
        DESTINATION_BRANCH = "${PR_DESTINATION_BRANCH}"
    }

    stages {
        // Prepare Workspace: Environment Setup, Workspace Preparation(Branch Management), Unity Setup, Initial running the project on Unity Editor
        stage('Prepare Workspace') {
            steps {
                //send 'In Progress' status to Bitbucket
                script {
                    // print jenkins env configurations
                    sh 'env'
                    generalUtil = load("${WORKSPACE}/groovy/generalHelper.groovy")
                    unityUtil = load("${WORKSPACE}/groovy/unityHelper.groovy")

                    env.COMMIT_HASH = generalUtil.validateCommitHashes(WORKSPACE, PROJECT_DIR, PR_COMMIT, TEST_RUN)

                    generalUtil.initializeEnvironment(WORKSPACE, env.COMMIT_HASH, PR_BRANCH, PROJECT_DIR)

                    generalUtil.cloneOrUpdateRepo(PROJECT_DIR, REPO_SSH, PR_BRANCH)

                    generalUtil.mergeBranchIfNeeded()
                }

                // Unity Setup: Identify the version of Unity Editor for the project
                echo "Identifying Unity version..."
                script {
                    env.UNITY_EXECUTABLE = unityUtil.getUnityExecutable(WORKSPACE, PROJECT_DIR)
                }

                // Initial running the project on Unity Editor    
                echo "Running Unity in batch mode to setup initial files..."
                dir ("${PROJECT_DIR}") {
                    script {
                        def logFile = "${REPORT_DIR}/batchmode_results/batch_mode_execution.log"

                        def flags = "-batchmode -nographics -projectPath \"${PROJECT_DIR}\" -executeMethod \"Packages.Rider.Editor.RiderScriptEditor.SyncSolution\" -logFile \"${logFile}\" -quit "
                        
                        echo "Flags set to: ${flags}"
                        
                        // Execute Unity in batch mode with memory settings
                        def exitCode = sh(script: """\"${env.UNITY_EXECUTABLE}\" ${flags}""", returnStatus: true)
                        
                        // Handle exit code
                        if (exitCode != 0) {
                            echo "Unity batch mode execution failed with exit code: ${exitCode}. Please check the log at ${logFile} for details."
                            sh "exit ${exitCode}"
                        }
                    }
                }
            }
        }
        stage('Linting'){
            steps{
                //Linting
                dir ("${REPORT_DIR}") {
                    sh "mkdir -p linting_results"
                }
                echo "running lint script"
                script {
                    sh "cp -f \'${WORKSPACE}/Bash/.editorconfig\' \'${PROJECT_DIR}\' 2>/dev/null"
                    echo "Parameters for bash: ${WORKSPACE}/Linting.bash ${PROJECT_DIR} ${REPORT_DIR}"
                    def exitCode = sh script: "sh \'${WORKSPACE}/Bash/Linting.bash\' \'${PROJECT_DIR}\' \'${REPORT_DIR}/linting_results\'", returnStatus: true 
                    echo "After bash call, exit code: ${exitCode}"
                    //handle exit code here
                    if(exitCode != 0)
                    {
                        echo "Error linting calling report"
                        echo "Parameters for Python Fail: \'${WORKSPACE}/python/linting_error_report.py\' \'${REPORT_DIR}/linting_results/format-report.json\' ${COMMIT_HASH} ${fail} \'${PROJECT_DIR}\'"
                        if(exitCode == 2) //report was generated call python script
                        {
                            sh script: "python \'${WORKSPACE}/python/linting_error_report.py\' \'${REPORT_DIR}/linting_results/format-report.json\' ${COMMIT_HASH} ${fail} \'${PROJECT_DIR}\'"
                        }
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE'){
                            error("Linting failed with exit code: ${exitCode}") //we exit no matter what on error code != 0
                        }
                    }
                    else
                    {
                        echo "Parameters for Python Pass: \'${WORKSPACE}/python/linting_error_report.py\' \'${REPORT_DIR}/linting_results/format-report.json\' ${COMMIT_HASH} ${pass} \'${PROJECT_DIR}\'"
                        sh script: "python \'${WORKSPACE}/python/linting_error_report.py\' \'${REPORT_DIR}/linting_results/format-report.json\' ${COMMIT_HASH} ${pass} \'${PROJECT_DIR}\'"
                    }
                }
            }
        }
        // Runs the project's EditMode tests, and then generates a test report and a code coverage report.
        // Sends the test results to Bitbucket once the tests complete.
        stage('EditMode Tests') {
            steps {
                dir ("${REPORT_DIR}") {
                    sh "mkdir -p test_results"
                    sh "mkdir -p coverage_results"
                }
                echo "Running EditMode tests..."
                dir ("${PROJECT_DIR}") {
                    script {
                        unityUtil.runUnityTests(UNITY_EXECUTABLE, REPORT_DIR, PROJECT_DIR, editMode, true, false)
                    }
                }
            }
        }
        // Runs the project's PlayMode tests, and then generates a code coverage report.
        // PlayMode tests need to be run once in the editor to generate the overall coverage report.
        stage('PlayMode Tests in Editor') {
            steps {
                echo "Running PlayMode tests in Editor environment..."
                dir ("${PROJECT_DIR}") {
                    retry (5) {
                        script {
                            unityUtil.runUnityTests(UNITY_EXECUTABLE, REPORT_DIR, PROJECT_DIR, playMode, true, false)
                        }
                    }
                }
            }
        }
        // Merges the two coverage reports from the EditMode and PlayMode (editor) reports into one.
        // Then sends a coverage report to Bitbucket.
        stage('Send Reports') {
            steps {
                echo "Generating code coverage report..."
                dir("${PROJECT_DIR}") {
                    sh """\"${UNITY_EXECUTABLE}\" \
                    -projectPath . \
                    -batchmode \
                    -debugCodeOptimization \
                    -nographics \
                    -logFile \"${REPORT_DIR}/coverage_results/coverage_report.log\" \
                    -enableCodeCoverage \
                    -coverageResultsPath \"${REPORT_DIR}/coverage_results\" \
                    -coverageOptions \"useProjectSettings\" \
                    -quit"""
 
                    script {
                        generalUtil.publishTestResultsHtmlToWebServer(FOLDER_NAME, TICKET_NUMBER, "${REPORT_DIR}/coverage_results/Report", "CodeCoverage")
                    }  
                }
                echo "Sending test report."
                script {
                    unityUtil.sendTestReport(WORKSPACE, REPORT_DIR, COMMIT_HASH)
                }
            }
        }
        //Builds the project and saves it.
        stage('Build Project') {
            steps {
                echo "Building Unity project..."
                sh "mkdir -p \"${PROJECT_DIR}/Assets/Editor/\"" //The following line assumed this folder exists in every project, adding check to ensure it does.
                sh "cp Builder.cs \"${PROJECT_DIR}/Assets/Editor/\""

                retry (5) {
                    script {
                        unityUtil.buildProject(REPORT_DIR, PROJECT_DIR, UNITY_EXECUTABLE)
                    }
                }
            }
        }
    }

    // When the pipeline finishes, sends the build status to Bitbucket.
    post {
        always {
            script {
                echo "Returning to the main branch..."
                generalUtil.checkoutBranch(PROJECT_DIR, DESTINATION_BRANCH)
            }
        }
        success {
            script {
                unityUtil.postBuild("SUCCESSFUL")
                generalUtil.sendBuildStatus(env.WORKSPACE, "SUCCESSFUL", env.COMMIT_HASH)
            }
        }
        failure {
            script {
                unityUtil.postBuild("FAILED")
                generalUtil.sendBuildStatus(env.WORKSPACE, "FAILED", env.COMMIT_HASH)
            }
        }
        aborted {
            script {
                unityUtil.postBuild("STOPPED")
                generalUtil.sendBuildStatus(env.WORKSPACE, "STOPPED", env.COMMIT_HASH)
            }
        }
    }
}